<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on GoCV - Golang Computer Vision Using OpenCV 3</title>
    <link>http://gocv.io/</link>
    <description>Recent content in Home on GoCV - Golang Computer Vision Using OpenCV 3</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Oct 2017 18:00:37 +0200</lastBuildDate>
    
	<atom:link href="http://gocv.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hello Video</title>
      <link>http://gocv.io/writing-code/hello-video/</link>
      <pubDate>Mon, 09 Oct 2017 18:00:37 +0200</pubDate>
      
      <guid>http://gocv.io/writing-code/hello-video/</guid>
      <description>This example opens a video capture device using device &amp;ldquo;0&amp;rdquo;, reads frames, and shows the video in a GUI window:
package main import ( &amp;quot;github.com/hybridgroup/gocv&amp;quot; ) func main() { webcam, _ := gocv.VideoCaptureDevice(0) window := gocv.NewWindow(&amp;quot;Hello&amp;quot;)	img := gocv.NewMat() for { webcam.Read(img) window.IMShow(img) gocv.WaitKey(1) } }  </description>
    </item>
    
    <item>
      <title>Linux</title>
      <link>http://gocv.io/getting-started/linux/</link>
      <pubDate>Mon, 09 Oct 2017 11:41:45 +0200</pubDate>
      
      <guid>http://gocv.io/getting-started/linux/</guid>
      <description>This page has information on how to install and use GoCV on Ubuntu, as well as other Linux distros.
You can use make to install OpenCV 3.3 with the handy Makefile included with this repo. If you already have installed OpenCV, you do not need to do so again. The installation performed by the Makefile is minimal, so it may remove OpenCV options such as Python or Java wrappers if you have already installed OpenCV some other way.</description>
    </item>
    
    <item>
      <title>Face Detect</title>
      <link>http://gocv.io/writing-code/face-detect/</link>
      <pubDate>Mon, 09 Oct 2017 18:02:15 +0200</pubDate>
      
      <guid>http://gocv.io/writing-code/face-detect/</guid>
      <description>This is a more complete example that opens a video capture device using device &amp;ldquo;0&amp;rdquo;. It also uses the CascadeClassifier class to load an external data file containing the classifier data. The program grabs each frame from the video, then uses the classifier to detect faces. If any faces are found, it draws a green rectangle around each one, then displays the video in an output window:
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;image/color&amp;quot; &amp;quot;github.</description>
    </item>
    
    <item>
      <title>OS X</title>
      <link>http://gocv.io/getting-started/osx/</link>
      <pubDate>Mon, 09 Oct 2017 11:41:50 +0200</pubDate>
      
      <guid>http://gocv.io/getting-started/osx/</guid>
      <description>This page has information on how to install and use GoCV on OS X.
Installing Install the GoCV package:
 go get -u -d github.com/hybridgroup/gocv  Now, install OpenCV 3.3 using Homebrew:
 brew install opencv  How to build/run code In order to build/run Go code that uses this package, you will need to specify the location for the include and lib files in your GoCV installation. If you have used Homebrew to install OpenCV 3.</description>
    </item>
    
    <item>
      <title>Windows</title>
      <link>http://gocv.io/getting-started/windows/</link>
      <pubDate>Mon, 09 Oct 2017 11:41:54 +0200</pubDate>
      
      <guid>http://gocv.io/getting-started/windows/</guid>
      <description>This page has information on how to install and use GoCV on Microsoft Windows 10, 64-bit.
Installing In order to build and install OpenCV 3.3 on Windows, you must first download and install MinGW-W64 and CMake, as follows.
MinGW-W64 Download and run the MinGW-W64 compiler installer from https://sourceforge.net/projects/mingw-w64/?source=typ_redirect. Choose the options for &amp;ldquo;posix&amp;rdquo; threads, and for &amp;ldquo;seh&amp;rdquo; exceptions handling, then install to the default location c:\Program Files\mingw-w64\x86_64-7.1.0-posix-seh-rt_v5-rev2.
Add the C:\Program Files\mingw-w64\x86_64-7.</description>
    </item>
    
    <item>
      <title>More Examples</title>
      <link>http://gocv.io/writing-code/more-examples/</link>
      <pubDate>Mon, 09 Oct 2017 18:04:54 +0200</pubDate>
      
      <guid>http://gocv.io/writing-code/more-examples/</guid>
      <description>GoCV comes with various useful command line utilities, that are also examples of how to use the package.
Captest Tests to verify you can capture video from a connected webcam.
https://github.com/hybridgroup/gocv/blob/master/cmd/captest/main.go
Capwindow Capture video from a connected webcam and display the video in a Window.
https://github.com/hybridgroup/gocv/blob/master/cmd/capwindow/main.go
Faceblur Captures video from a connected camera, then uses the CascadeClassifier to detect faces, blurs them using a Gaussian blur, then displays the blurred video in a window.</description>
    </item>
    
  </channel>
</rss>